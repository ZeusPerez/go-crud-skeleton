// Code generated by mockery v2.14.0. DO NOT EDIT.

package services

import (
	context "context"

	models "github.com/ZeusPerez/go-crud-skeleton/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// MockDevs is an autogenerated mock type for the Devs type
type MockDevs struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, dev
func (_m *MockDevs) Create(ctx context.Context, dev models.Dev) error {
	ret := _m.Called(ctx, dev)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Dev) error); ok {
		r0 = rf(ctx, dev)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, email
func (_m *MockDevs) Delete(ctx context.Context, email string) error {
	ret := _m.Called(ctx, email)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, email
func (_m *MockDevs) Get(ctx context.Context, email string) (models.Dev, error) {
	ret := _m.Called(ctx, email)

	var r0 models.Dev
	if rf, ok := ret.Get(0).(func(context.Context, string) models.Dev); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Get(0).(models.Dev)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, dev
func (_m *MockDevs) Update(ctx context.Context, dev models.Dev) (models.Dev, error) {
	ret := _m.Called(ctx, dev)

	var r0 models.Dev
	if rf, ok := ret.Get(0).(func(context.Context, models.Dev) models.Dev); ok {
		r0 = rf(ctx, dev)
	} else {
		r0 = ret.Get(0).(models.Dev)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, models.Dev) error); ok {
		r1 = rf(ctx, dev)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMockDevs interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockDevs creates a new instance of MockDevs. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockDevs(t mockConstructorTestingTNewMockDevs) *MockDevs {
	mock := &MockDevs{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
